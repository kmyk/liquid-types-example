%{
open FSharp.Text.Parsing
open Liquid.Syntax
open System.Numerics

let withLoc (parseState : IParseState) expr : ExprWith<option<Location>> =
    let loc = { line = (parseState.ResultRange |> fst).Line + 1
                column = (parseState.ResultRange |> fst).Column + 1 }
    { value = expr
      info = Some loc }
let app f x parseState gensym =
    let f = withLoc parseState (VarExp(ValName f))
    let x = x gensym
    withLoc parseState (AppExp(f, x))
let app2 f x y parseState gensym =
    let f = withLoc parseState (VarExp(ValName f))
    let x = x gensym
    let y = y gensym
    withLoc parseState (AppExp(withLoc parseState (AppExp(f, x)), y))

type StartType = (unit -> string) -> ExprWith<option<Location>>
%}

%start start

%token LPAREN
%token RPAREN
%token LBRACKET
%token RBRACKET
%token LBRACE
%token RBRACE

%token LET
%token REC
%token EQUAL
%token IN
%token BAR
%token TO
%token UNDERSCORE
%token COLON
%token FUN
%token IF
%token THEN
%token ELSE

%token ADD
%token SUB
%token MUL
%token DIV
%token MOD
%token POW
%token LT
%token LE
%token EQ
%token NE
%token GE
%token GT
%token LNOT
%token LAND
%token LOR

%token INT
%token <BigInteger> POSITIVE
%token <BigInteger> ZERO
%token <BigInteger> NEGATIVE
%token BOOL
%token <bool> TRUE
%token <bool> FALSE
%token <string> IDENT

%token EOF

%type <StartType> start

%%

start:
    v_expr { $1 }

t_expr:
    | t_bare TO t_expr { fun gensym -> FunRTy(ValName(gensym()), $1 gensym, $3 gensym) }
    | LPAREN v_name COLON t_expr RPAREN TO t_expr { fun gensym -> FunRTy($2, $4 gensym, $7 gensym) }
    | t_bare { $1 }
t_bare:
    | LPAREN t_expr RPAREN { $2 }
    | LBRACE v_name_optional COLON t_atomic BAR b_expr RBRACE { fun gensym -> BaseRTy($2 gensym, $4, $6) }
    | t_atomic { fun gensym -> BaseRTy(ValName(gensym()), $1, LiteralBExp true) }
t_atomic:
    | INT { IntATy }
    | BOOL { BoolATy }

i_expr:
    | i_add { $1 }
i_add:
    | i_add ADD i_mul { AddIExp($1, $3) }
    | i_add SUB i_mul { SubIExp($1, $3) }
    | i_mul { $1 }
i_mul:
    | integer MUL v_name { MulIExp($1, VarIExp $3) }
    | integer MUL LPAREN i_expr RPAREN { MulIExp($1, $4) }
    | i_atomic MUL integer { MulIExp($3, $1) }
    | SUB i_atomic { SubIExp(LiteralIExp 0I, $2) }
    | i_atomic { $1 }
i_atomic:
    | integer { LiteralIExp $1 }
    | v_name { VarIExp $1 }
    | LPAREN i_expr RPAREN { $2 }

b_expr:
    | b_or { $1 }
b_or:
    | b_and LOR b_or { OrBExp($1, $3) }
    | b_and { $1 }
b_and:
    | b_not LAND b_and { AndBExp($1, $3) }
    | b_not { $1 }
b_not:
    | LNOT b_not { NotBExp($2) }
    | b_atomic { $1 }
b_atomic:
    | boolean { LiteralBExp $1 }
    | i_expr EQUAL i_expr { EqBExp($1, $3) }
    | i_expr NE i_expr { NotBExp(EqBExp($1, $3)) }
    | i_expr LT i_expr { LtBExp($1, $3) }
    | i_expr GE i_expr { NotBExp(LtBExp($1, $3)) }
    | i_expr GT i_expr { LtBExp($3, $1) }
    | i_expr LE i_expr { NotBExp(LtBExp($3, $1)) }
    | LPAREN b_expr RPAREN { $2 }

v_expr:
    | FUN v_name_optional TO v_expr { fun gensym -> LamExp($2 gensym, $4 gensym) |> withLoc parseState }
    | IF v_expr THEN v_expr ELSE v_expr { fun gensym -> IfThenElseExp($2 gensym, $4 gensym, $6 gensym) |> withLoc parseState }
    | LET v_name_optional EQUAL v_expr IN v_expr { fun gensym -> LetExp($2 gensym, $4 gensym, $6 gensym) |> withLoc parseState }
    | LET REC v_name_optional EQUAL FUN v_name_optional TO v_expr IN v_expr { fun gensym -> LetRecExp($3 gensym, $6 gensym, $8 gensym, $10 gensym) |> withLoc parseState }
    | v_or { $1 }
v_or:
    | v_or LOR v_and { app2 "or" $1 $3 parseState }
    | v_and { $1 }
v_and:
    | v_and LAND v_not { app2 "and" $1 $3 parseState }
    | v_not { $1 }
v_not:
    | LNOT v_not { app "not" $2 parseState }
    | v_compare { $1 }
v_compare:
    | v_add LT v_add { app2 "<" $1 $3 parseState }
    | v_add LE v_add { app2 "<=" $1 $3 parseState }
    | v_add EQUAL v_add { app2 "=" $1 $3 parseState }
    | v_add NE v_add { app2 "<>" $1 $3 parseState }
    | v_add GE v_add { app2 ">=" $1 $3 parseState }
    | v_add GT v_add { app2 ">" $1 $3 parseState }
    | v_add { $1 }
v_add:
    | v_add ADD v_mul { app2 "+" $1 $3 parseState }
    | v_add SUB v_mul { app2 "-" $1 $3 parseState }
    | v_mul { $1 }
v_mul:
    | v_mul MUL v_pow { app2 "*" $1 $3 parseState }
    | v_mul DIV v_pow { app2 "/" $1 $3 parseState }
    | v_mul MOD v_pow { app2 "%" $1 $3 parseState }
    | SUB v_pow { app "negate" $2 parseState }
    | v_pow { $1 }
v_pow:
    | v_funapp POW v_pow { app2 "**" $1 $3 parseState }
    | v_funapp { $1 }
v_funapp:
    | v_funapp v_atomic { fun gensym -> AppExp($1 gensym, $2 gensym) |> withLoc parseState }
    | v_atomic { $1 }
v_atomic:
    | v_name { fun _ -> VarExp($1) |> withLoc parseState }
    | LPAREN v_expr RPAREN { $2 }
    | integer { fun _ -> LiteralExp(IntLit $1) |> withLoc parseState }
    | boolean { fun _ -> LiteralExp(BoolLit $1) |> withLoc parseState }

integer:
    | POSITIVE { $1 }
    | ZERO { $1 }
    | NEGATIVE { $1 }
boolean:
    | TRUE { $1 }
    | FALSE { $1 }

v_name: IDENT { ValName $1 }
t_name: IDENT { TyName $1 }
v_name_optional:
    | v_name { fun _ -> $1 }
    | UNDERSCORE { fun gensym -> ValName(gensym()) }
